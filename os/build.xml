<?xml version="1.0" encoding="UTF-8"?>
<project name="Omeka" basedir="." default="init">
    <property name="build.dir" location="build"/>
    <property name="build.data.dir" location="application/data/build"/>
    <property name="scripts.data.dir" location="application/data/scripts"/>
    <property name="migration.dir" location="application/data/migrations"/>
    <property name="lang.dir" location="application/language"/>
    <property name="composer.path" location="${build.dir}/composer.phar"/>
    <property name="composer.vendor.path" location="vendor"/>
    <property name="composer.bin.path" location="${composer.vendor.path}/bin"/>
    <property name="phpunit.path" location="${composer.bin.path}/phpunit"/>
    <property name="phpunit.log.path" location="${build.dir}/test-results.xml"/>
    <property name="phpunit.coverage.html.path" location="${build.dir}/test-coverage/html"/>
    <property name="php.path" value="php"/>

    <target name="build-dir">
        <mkdir dir="${build.dir}"/>
    </target>
    <target name="check-composer">
        <available property="composer.installed" file="${composer.path}"/>
    </target>
    <target name="get-composer"
            depends="build-dir,check-composer"
            unless="composer.installed">
        <get src="https://getcomposer.org/installer"
             dest="${build.dir}/composer-installer"
        />
    <exec executable="${php.path}" dir="${build.dir}" failonerror="true">
            <arg file="${build.dir}/composer-installer"/>
        </exec>
    </target>
    <target name="update-composer" if="composer.installed">
        <exec executable="${php.path}" failonerror="true">
            <arg file="${composer.path}"/>
            <arg value="self-update"/>
        </exec>
    </target>
    <target name="install-deps"
            depends="get-composer,update-composer"
            description="Install dependencies.">
        <condition property="composer.nodev.arg"
                   value="--no-dev"
                   else="">
            <isset property="composer.nodev"/>
        </condition>
        <exec executable="${php.path}" failonerror="true">
            <arg file="${composer.path}"/>
            <arg line="${composer.nodev.arg}"/>
            <arg value="install"/>
        </exec>
    </target>
    <target name="update-deps"
            depends="get-composer,update-composer"
            description="Update locked dependencies.">
        <exec executable="${php.path}" failonerror="true">
            <arg file="${composer.path}"/>
            <arg value="update"/>
        </exec>
    </target>
    <target name="dedist"
            description="Copy .dist files to their proper locations.">
        <copy todir=".">
            <fileset dir=".">
                <include name=".htaccess.dist"/>
                <include name="config/*.dist"/>
                <include name="logs/*.dist"/>
                <include name="application/test/config/*.dist"/>
                <present targetdir="." present="srconly">
                    <mapper type="glob" from="*.dist" to="*"/>
                </present>
            </fileset>
            <mapper type="glob" from="*.dist" to="*"/>
        </copy>
    </target>
    <target name="update-db-data"
            depends="create-schema,generate-proxies"
            description="Update database-related data files after changes to the ORM entities."
    />
    <target name="generate-proxies">
        <exec executable="./vendor/bin/doctrine" failonerror="true">
            <arg value="orm:generate-proxies"/>
        </exec>
    </target>
    <target name="test-all" description="Run all automated tests" depends="test,test-cs"/>
    <target name="test" description="Run PHPUnit automated tests.">
        <condition property="phpunit.coverage.arg"
                   value="--coverage-html ${phpunit.coverage.html.path}"
                   else="">
            <isset property="test.coverage"/>
        </condition>
        <exec executable="${phpunit.path}"
              dir="application/test"
              failonerror="true">
            <arg value="-d"/>
            <arg value="date.timezone=America/New_York"/>
            <arg value="--log-junit"/>
            <arg file="${build.dir}/test-results.xml"/>
            <arg line="${phpunit.coverage.arg}"/>
        </exec>
    </target>
    <target name="test-cs" description="Run automated code style checker">
        <exec executable="${composer.bin.path}/php-cs-fixer" failonerror="true">
            <arg value="fix"/>
            <arg value="--dry-run"/>
            <arg value="--verbose"/>
            <arg value="--diff"/>
        </exec>
    </target>
    <target name="fix-cs" description="Automatically fix code style issues">
        <exec executable="${composer.bin.path}/php-cs-fixer" failonerror="true">
            <arg value="fix"/>
            <arg value="--verbose"/>
        </exec>
    </target>
    <target name="init"
            description="Set up this Omeka install."
            depends="dedist,install-deps"
    />
    <target name="zip"
            description="Build a zipped package of Omeka S."
            depends="clean,init">
        <zip destfile="${build.dir}/omeka-s.zip">
            <zipfileset dir="." prefix="omeka-s">
                <exclude name="**/*.dist"/>
                <exclude name="build/**"/>
            </zipfileset>
        </zip>
    </target>
    <target name="clean"
            description="Remove build files and external dependencies.">
        <delete dir="${build.dir}" quiet="true"/>
        <delete dir="${composer.vendor.path}" quiet="true"/>
    </target>
    <target name="create-schema">
        <exec executable="${php.path}" failonerror="true">
            <arg file="${scripts.data.dir}/create-schema.php"/>
        </exec>
    </target>
    <target name="create-media-type-map"
            description="Create a map between Internet media types and file extensions.">
        <exec executable="${php.path}" failonerror="true">
            <arg file="${scripts.data.dir}/create-media-type-map.php"/>
        </exec>
    </target>
    <target name="create-migration"
            description="Create a new migration.">
        <tstamp>
            <format property="migration.date" pattern="yyyyMMddHHmmss" timezone="UTC"/>
        </tstamp>
        <input message="Migration name (UpperCamelCased):"
               addproperty="migration.name"
        />
        <copy file="${build.data.dir}/migration.php.tpl"
              tofile="${migration.dir}/${migration.date}_${migration.name}.php">
            <filterchain>
                <replacetokens>
                    <token key="ClassName" value="${migration.name}"/>
                </replacetokens>
            </filterchain>
        </copy>
    </target>
    <target name="i18n:template" description="Update the translation template.">
        <property name="pot.file" location="${lang.dir}/template.pot"/>
        <tempfile property="xgettext.temp" suffix=".pot" destdir="${lang.dir}" createfile="true"
            deleteonexit="true"
        />
        <tempfile property="tagged.temp" suffix=".pot" destdir ="${lang.dir}" deleteonexit="true"/>
        <tempfile property="vocab.temp" suffix=".pot" destdir ="${lang.dir}" deleteonexit="true"/>
        <apply executable="xgettext" relative="true" parallel="true" verbose="true">
            <arg value="--language=php"/>
            <arg value="--from-code=utf-8"/>
            <arg value="--keyword=translate"/>
            <arg value="--join-existing"/>
            <arg value="-o"/>
            <arg file="${xgettext.temp}"/>
            <fileset dir="." includes="**/*.php **/*.phtml"
                excludes="themes/ modules/"/>
        </apply>
        <exec executable="${composer.bin.path}/extract-tagged-strings.php" output="${tagged.temp}"/>
        <exec executable="${php.path}" failonerror="true" output="${vocab.temp}">
            <arg file="${scripts.data.dir}/extract-vocab-strings.php"/>
        </exec>
        <exec executable="msgcat">
            <arg file="${xgettext.temp}"/>
            <arg file="${tagged.temp}"/>
            <arg file="${vocab.temp}"/>
            <arg value="-o"/>
            <arg file="${pot.file}"/>
        </exec>
    </target>
</project>
